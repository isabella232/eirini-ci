resources:
- name: eirini-private-config
  type: git
  icon: git
  source:
    branch: master
    private_key: ((github-private-key))
    uri: git@github.com:cloudfoundry/eirini-private-config
- name: postfacto
  icon: egg-easter
  type: github-release
  check_every: 12h
  source:
    owner: pivotal
    repository: postfacto
    globs: package.zip
- name: ci-resources
  icon: git
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry-incubator/eirini-ci
# - name: jefe
#   icon: git
#   type: git
#   source:
#     branch: master
#     uri: https://github.com/herrjulz/jefe
# - name: eirinidotcf
#   icon: git
#   type: git
#   source:
#     branch: master
#     uri: https://github.com/eirini-forks/eirinidotcf
# - name: every-morning
#   icon: alarm
#   type: time
#   source:
#     start: 5:00 AM
#     stop: 6:00 AM

jobs:
#- name: unclaim-clusters
#  plan:
#  - get: every-morning
#    trigger: true
#  - task: unclaim
#    config:
#      platform: linux
#      image_resource:
#        type: docker-image
#        source:
#          repository: eirini/ci
#      params:
#          JEFE_ADMIN_PASSWORD: ((jefe-admin-pass))
#          JEFE_UNCLAIM_CLUSTER_URI: (( concat "https://jefe." config.cluster.name "." config.cluster.domain "/envs/unclaim" ))
#      run:
#        path: bash
#        args:
#        - -c
#        - |
#          #!/bin/bash
#          set -eoux pipefail

#          curl -X PUT -u admin:$JEFE_ADMIN_PASSWORD $JEFE_UNCLAIM_CLUSTER_URI

#  on_failure: (( grab slack-notification.on_failure ))
# - name: deploy-jefe
#   serial: true
#   plan:
#   - in_parallel:
#     - get: jefe
#       trigger: true
#     - get: eirini-private-config
#   - task: deploy
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: eirini/ci
#       run:
#         path: bash
#         args:
#         - -c
#         - (( file "../../inline-tasks/deploy-jefe.sh" ))
#       params:
#         JEFE_GITHUB_CLIENT_ID: ((jefe-client-id))
#         JEFE_GITHUB_SECRET: ((jefe-client-secret))
#         JEFE_DSN: jefeuser:((jefe-dbuser-pass))@tcp(sl-eu-gb-p05.dblayer.com:19522)
#         JEFE_O_AUTH_ORG: eirini-forks
#         JEFE_ADMIN_PASSWORD: ((jefe-admin-pass))
#       inputs:
#       - name: jefe
#       - name: eirini-private-config
#   on_failure: (( grab slack-notification.on_failure ))
- name: deploy-postfacto
  serial: true
  plan:
  - in_parallel:
    - get: postfacto
      trigger: true
    - get: eirini-private-config
    - get: ci-resources
  - task: download-kubeconfig
    params:
      CLUSTER_NAME: (( grab config.cluster.name ))
      GCP_REGION: (( grab config.gcp.region ))
      GCP_SERVICE_ACCOUNT_JSON: (( grab config.gcp.service-account-json ))
      GCP_ZONE: (( grab config.gcp.zone ))
    config:
      image_resource:
        source:
          repository: google/cloud-sdk
        type: docker-image
      platform: linux
      inputs:
        - name: ci-resources
      outputs:
        - name: kube
      run:
        path: /usr/bin/env
        args:
        - bash
        - -c
        - (( file "../../inline-tasks/gcp-download-kubeconfig.sh" ))
  - task: init-helm
    config:
      image_resource:
        source:
          repository: eirini/gcloud
        type: docker-image
      inputs:
      - name: ci-resources
      - name: kube
      platform: linux
      run:
        path: /usr/bin/env
        args:
        - bash
        - -c
        - (( file "../../inline-tasks/init-helm.sh" ))

  - task: helm-install-redis
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eirini/gcloud
      run:
        path: bash
        args:
        - -c
        - (( file "../../inline-tasks/helm-install-redis.sh" ))
      inputs:
      - name: kube
    params:
      KUBECONFIG: kube/config
      GCP_REGION: (( grab config.gcp.region ))
      GCP_SERVICE_ACCOUNT_JSON: (( grab config.gcp.service-account-json ))
      GCP_ZONE: (( grab config.gcp.zone ))
  - task: get-credentials
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eirini/gcloud
      run:
        path: bash
        args:
        - -c
        - (( file "../../inline-tasks/get-postfacto-credentials-cf4k8s.sh" ))
      inputs:
      - name: kube
      outputs:
      - name: redis-password
  - task: deploy
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eirini/ci
      run:
        path: bash
        args:
        - -c
        - (( file "../../inline-tasks/deploy-postfacto-cf4k8s.sh" ))
      inputs:
      - name: postfacto
      - name: eirini-private-config
      - name: ci-resources
      - name: redis-password
      PARAMS:
        MYSQL_ADDRESS: ((mysql-address))
  # on_failure: (( grab slack-notification.on_failure ))
# - name: deploy-eirinidotcf
#   serial: true
#   plan:
#   - in_parallel:
#     - get: ci-resources
#     - get: eirinidotcf
#       trigger: true
#     - get: eirini-private-config
#   - task: deploy-db
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: eirini/ibmcloud
#       inputs:
#         - name: ci-resources
#         - name: eirinidotcf
#       outputs:
#         - name: db-conf
#       params:
#         CLUSTER_NAME: acceptance
#       run:
#         path: /usr/bin/env
#         args:
#         - bash
#         - -c
#         - (( file "../../inline-tasks/deploy-eirinidotcf-db.sh" ))
#     params:
#       CLUSTER_NAME: acceptance
#       IBMCLOUD_ACCOUNT: ((ibmcloud-account))
#       IBMCLOUD_USER: ((ibmcloud-user))
#       IBMCLOUD_PASSWORD: ((ibmcloud-password))
#   - task: deploy-web
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: eirini/ci
#       inputs:
#         - name: ci-resources
#         - name: eirinidotcf
#         - name: eirini-private-config
#         - name: db-conf
#       run:
#         path: /usr/bin/env
#         args:
#         - bash
#         - -c
#         - (( file "../../inline-tasks/deploy-eirinidotcf.sh" ))
#   on_failure: (( grab slack-notification.on_failure ))
